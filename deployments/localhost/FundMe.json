{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "number",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xddf1021822b72cca43363fda9785aae0e70cf4863d8318dfdf35ecd84ca29c25",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "632925",
    "logsBloom": "0x
    "blockHash": "0xb6ab67e1125f11ef056d099e340bdf50ea3f4511160dca9ff1aa91fde5ac3784",
    "transactionHash": "0xddf1021822b72cca43363fda9785aae0e70cf4863d8318dfdf35ecd84ca29c25",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "632925",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "bce9cf0894eb2b29c72903d106315049",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Praveen Sheoran\",\"details\":\"This implements price feeds for our library\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A contract for funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A demo\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// Get funds from users\\n// Withdraw funds\\n// Set a minimum funding value in USD\\n\\n//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__NotOwner();\\n\\n//Smart contarcts can also hold funds just like the wallet.\\n//Since everytime we deploy a contract they get a contract address and its nearly the same as wallet address.\\n// So both wallet and contract can hold native blockchain token like Etherium\\n/**\\n * @title A contract for funding\\n * @author Praveen Sheoran\\n * @notice A demo\\n * @dev This implements price feeds for our library\\n */\\ncontract FundMe {\\n    //type declarations\\n    uint256 public number;\\n    uint256 public minimumUsd = 50 * 10 ** 18;\\n\\n    // state variables\\n    address[] private s_funders;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    using PriceConverter for uint256; // Using as Library\\n    address private immutable i_owner;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    modifier onlyOwner() {\\n        // require(msg.sender == i_owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    // Functions Order:\\n    //// constructor\\n    //// receive\\n    //// fallback\\n    //// external\\n    //// public\\n    //// internal\\n    //// private\\n    //// view / pure\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    // This function for people to send money to\\n    function fund() public payable {\\n        // Want to be able to set a minimum amount in USD.\\n        // 1. How do we send ETH to this contract?\\n        // msg - a global variable\\n\\n        // require is checker which check values if does not meet the criteria it will revret.\\n        // What is reverting - Undo any action before, and send the remaining gas.\\n        // number = 5;\\n        // Lets say if we call this fund method with ether less than 1, then it will revert.\\n        // So did we spend any gas? Yes we did. We spend the gas on assiging the value to number = 5.\\n        // But it will return all the gas after this require\\n        // require(\\n        //     msg.value.getConversionRate(s_priceFeed) >= minimumUsd,\\n        //     \\\"Didn't send enough!\\\"\\n        // ); // 1e18 == 1 * 10 ** 18 = 1000000000000000000\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n\\n        //Send ether or withdraw ether\\n        //transfer\\n        // msg.sender = address type\\n        // payable(msg.sender) = payable type\\n        //Problem with transfer funtion that it is capped at 2300 gas and it will throw an error\\n        //payable(msg.sender).transfer(address(this).balance);\\n        //Send\\n        // 2300 gas cap but wont throw an error will return a bool\\n        //  bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        //Call\\n        // we can use it call any function in all of the etherum\\n        // No capped gas and returns boolean and bytes data\\n        // (bool callSuceess, ) = payable(msg.sender).call{\\n        //     value: address(this).balance\\n        // }(\\\"\\\");\\n        // require(callSuceess, \\\"Call failed\\\");\\n    }\\n\\n    // This function is for the i_owner of this contract to withdraw money that different s_funders gives us.\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // Transfer vs call vs Send\\n        // payable(msg.sender).transfer(address(this).balance);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getAddressToAmountFunded(\\n        address funder\\n    ) public view returns (uint256) {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0xe77173771ae7e832b4e2827681fd5d4f70f781f1dc515cb003e9a8ac1cfcbd5c\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n// All the funtions are internal in library\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n    }\\n\\n    // 20051300000000000000000\\n    function getDecimal(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint8) {\\n        return priceFeed.decimals();\\n    }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // the actual ETH/USD conversation rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n\\n    function version() internal view returns (uint256) {\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n            0x694AA1769357215DE4FAC081bf1f309aDC325306\\n        );\\n        return priceFeed.version();\\n    }\\n}\\n\",\"keccak256\":\"0x6f17562fa29aa8bf9347a5107c128c91b231fae1cdcfb250b1105ced8c61234f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040526802b5e3af16b188000060015534801561001d57600080fd5b50604051610b14380380610b14833981810160405281019061003f919061011d565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061014a565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100ea826100bf565b9050919050565b6100fa816100df565b811461010557600080fd5b50565b600081519050610117816100f1565b92915050565b600060208284031215610133576101326100ba565b5b600061014184828501610108565b91505092915050565b6080516109a1610173600039600081816102eb0152818161047f015261051e01526109a16000f3fe60806040526004361061007f5760003560e01c8063893d20e81161004e578063893d20e8146101425780639e87a5cd1461016d578063b60d428814610198578063d7b4750c146101a25761008e565b80630343fb2514610098578063098de820146100d55780633ccfd60b146101005780638381f58a146101175761008e565b3661008e5761008c6101df565b005b6100966101df565b005b3480156100a457600080fd5b506100bf60048036038101906100ba91906106be565b61029a565b6040516100cc9190610704565b60405180910390f35b3480156100e157600080fd5b506100ea6102e3565b6040516100f79190610704565b60405180910390f35b34801561010c57600080fd5b506101156102e9565b005b34801561012357600080fd5b5061012c610514565b6040516101399190610704565b60405180910390f35b34801561014e57600080fd5b5061015761051a565b604051610164919061072e565b60405180910390f35b34801561017957600080fd5b50610182610542565b60405161018f91906107a8565b60405180910390f35b6101a06101df565b005b3480156101ae57600080fd5b506101c960048036038101906101c491906107ef565b61056c565b6040516101d6919061072e565b60405180910390f35b34600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461022e919061084b565b925050819055506002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60015481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461036e576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60028054905081101561041a576000600282815481106103945761039361087f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508080610412906108ae565b915050610371565b50600067ffffffffffffffff811115610436576104356108f6565b5b6040519080825280602002602001820160405280156104645781602001602082028036833780820191505090505b506002908051906020019061047a9291906105b4565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516104c190610956565b60006040518083038185875af1925050503d80600081146104fe576040519150601f19603f3d011682016040523d82523d6000602084013e610503565b606091505b505090508061051157600080fd5b50565b60005481565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600282815481106105825761058161087f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b82805482825590600052602060002090810192821561062d579160200282015b8281111561062c5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906105d4565b5b50905061063a919061063e565b5090565b5b8082111561065757600081600090555060010161063f565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061068b82610660565b9050919050565b61069b81610680565b81146106a657600080fd5b50565b6000813590506106b881610692565b92915050565b6000602082840312156106d4576106d361065b565b5b60006106e2848285016106a9565b91505092915050565b6000819050919050565b6106fe816106eb565b82525050565b600060208201905061071960008301846106f5565b92915050565b61072881610680565b82525050565b6000602082019050610743600083018461071f565b92915050565b6000819050919050565b600061076e61076961076484610660565b610749565b610660565b9050919050565b600061078082610753565b9050919050565b600061079282610775565b9050919050565b6107a281610787565b82525050565b60006020820190506107bd6000830184610799565b92915050565b6107cc816106eb565b81146107d757600080fd5b50565b6000813590506107e9816107c3565b92915050565b6000602082840312156108055761080461065b565b5b6000610813848285016107da565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610856826106eb565b9150610861836106eb565b92508282019050808211156108795761087861081c565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006108b9826106eb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036108eb576108ea61081c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610940600083610925565b915061094b82610930565b600082019050919050565b600061096182610933565b915081905091905056fea2646970667358221220c9da36de8085522d2f59b238bcd78b578bc50da8b507d13831bc9fe6ebf1524d64736f6c63430008120033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c8063893d20e81161004e578063893d20e8146101425780639e87a5cd1461016d578063b60d428814610198578063d7b4750c146101a25761008e565b80630343fb2514610098578063098de820146100d55780633ccfd60b146101005780638381f58a146101175761008e565b3661008e5761008c6101df565b005b6100966101df565b005b3480156100a457600080fd5b506100bf60048036038101906100ba91906106be565b61029a565b6040516100cc9190610704565b60405180910390f35b3480156100e157600080fd5b506100ea6102e3565b6040516100f79190610704565b60405180910390f35b34801561010c57600080fd5b506101156102e9565b005b34801561012357600080fd5b5061012c610514565b6040516101399190610704565b60405180910390f35b34801561014e57600080fd5b5061015761051a565b604051610164919061072e565b60405180910390f35b34801561017957600080fd5b50610182610542565b60405161018f91906107a8565b60405180910390f35b6101a06101df565b005b3480156101ae57600080fd5b506101c960048036038101906101c491906107ef565b61056c565b6040516101d6919061072e565b60405180910390f35b34600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461022e919061084b565b925050819055506002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60015481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461036e576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60028054905081101561041a576000600282815481106103945761039361087f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508080610412906108ae565b915050610371565b50600067ffffffffffffffff811115610436576104356108f6565b5b6040519080825280602002602001820160405280156104645781602001602082028036833780820191505090505b506002908051906020019061047a9291906105b4565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516104c190610956565b60006040518083038185875af1925050503d80600081146104fe576040519150601f19603f3d011682016040523d82523d6000602084013e610503565b606091505b505090508061051157600080fd5b50565b60005481565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600282815481106105825761058161087f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b82805482825590600052602060002090810192821561062d579160200282015b8281111561062c5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906105d4565b5b50905061063a919061063e565b5090565b5b8082111561065757600081600090555060010161063f565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061068b82610660565b9050919050565b61069b81610680565b81146106a657600080fd5b50565b6000813590506106b881610692565b92915050565b6000602082840312156106d4576106d361065b565b5b60006106e2848285016106a9565b91505092915050565b6000819050919050565b6106fe816106eb565b82525050565b600060208201905061071960008301846106f5565b92915050565b61072881610680565b82525050565b6000602082019050610743600083018461071f565b92915050565b6000819050919050565b600061076e61076961076484610660565b610749565b610660565b9050919050565b600061078082610753565b9050919050565b600061079282610775565b9050919050565b6107a281610787565b82525050565b60006020820190506107bd6000830184610799565b92915050565b6107cc816106eb565b81146107d757600080fd5b50565b6000813590506107e9816107c3565b92915050565b6000602082840312156108055761080461065b565b5b6000610813848285016107da565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610856826106eb565b9150610861836106eb565b92508282019050808211156108795761087861081c565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006108b9826106eb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036108eb576108ea61081c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610940600083610925565b915061094b82610930565b600082019050919050565b600061096182610933565b915081905091905056fea2646970667358221220c9da36de8085522d2f59b238bcd78b578bc50da8b507d13831bc9fe6ebf1524d64736f6c63430008120033",
  "devdoc": {
    "author": "Praveen Sheoran",
    "details": "This implements price feeds for our library",
    "kind": "dev",
    "methods": {},
    "title": "A contract for funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "A demo",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "number",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 60,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "minimumUsd",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 63,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 67,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 75,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}