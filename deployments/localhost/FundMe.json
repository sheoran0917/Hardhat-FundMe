{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "number",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x8193e6074497960160bc87008a2af1785bc21ba602fc591c87a384f25f540067",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "995304",
    "logsBloom": "0x
    "blockHash": "0x1d826a337a565e94557d60ce960cad7f42024421c8fd31843873562ab9df8faa",
    "transactionHash": "0x8193e6074497960160bc87008a2af1785bc21ba602fc591c87a384f25f540067",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "995304",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "79a1884fe1ce9e5a31ad85b3aced49e7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Praveen Sheoran\",\"details\":\"This implements price feeds for our library\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A contract for funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A demo\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// Get funds from users\\n// Withdraw funds\\n// Set a minimum funding value in USD\\n\\n//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__Noti_ownere();\\n\\n//Smart contarcts can also hold funds just like the wallet.\\n//Since everytime we deploy a contract they get a contract address and its nearly the same as wallet address.\\n// So both wallet and contract can hold native blockchain token like Etherium\\n/**\\n * @title A contract for funding\\n * @author Praveen Sheoran\\n * @notice A demo\\n * @dev This implements price feeds for our library\\n */\\ncontract FundMe {\\n    //type declarations\\n    uint256 public number;\\n    uint256 public minimumUsd = 1 * 1e18;\\n\\n    // state variables\\n    address[] private s_funders;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    using PriceConverter for uint256; // Using as Library\\n    address private immutable i_owner;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    modifier onlyowner() {\\n        require(msg.sender == i_owner, \\\"Sender is not the i_owner\\\");\\n        _;\\n    }\\n\\n    // Functions Order:\\n    //// constructor\\n    //// receive\\n    //// fallback\\n    //// external\\n    //// public\\n    //// internal\\n    //// private\\n    //// view / pure\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    // This function for people to send money to\\n    function fund() public payable {\\n        // Want to be able to set a minimum amount in USD.\\n        // 1. How do we send ETH to this contract?\\n        // msg - a global variable\\n\\n        // require is checker which check values if does not meet the criteria it will revret.\\n        // What is reverting - Undo any action before, and send the remaining gas.\\n        number = 5;\\n        // Lets say if we call this fund method with ether less than 1, then it will revert.\\n        // So did we spend any gas? Yes we did. We spend the gas on assiging the value to number = 5.\\n        // But it will return all the gas after this require\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= minimumUsd,\\n            \\\"Didn't send enough!\\\"\\n        ); // 1e18 == 1 * 10 ** 18 = 1000000000000000000\\n        s_funders.push(msg.sender);\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n\\n        //Send ether or withdraw ether\\n        //transfer\\n        // msg.sender = address type\\n        // payable(msg.sender) = payable type\\n        //Problem with transfer funtion that it is capped at 2300 gas and it will throw an error\\n        payable(msg.sender).transfer(address(this).balance);\\n        //Send\\n        // 2300 gas cap but wont throw an error will return a bool\\n        bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        require(sendSuccess, \\\"Send failed\\\");\\n        //Call\\n        // we can use it call any function in all of the etherum\\n        // No capped gas and returns boolean and bytes data\\n        (bool callSuceess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuceess, \\\"Call failed\\\");\\n    }\\n\\n    // This function is for the i_owner of this contract to withdraw money that different s_funders gives us.\\n    function withdraw() public onlyowner {\\n        address[] memory funders = s_funders;\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address s_fundersAddress = s_funders[funderIndex];\\n            s_addressToAmountFunded[s_fundersAddress] = 0;\\n        }\\n        //reset the address\\n        s_funders = new address[](0);\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getAddressToAmountFunded(\\n        address funder\\n    ) public view returns (uint256) {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0xbf89d92fe67a5ea9d4d4d330b8092ebec433040a912607468a524d34dbad4283\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n// All the funtions are internal in library\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        return uint256(price * 1e10);\\n    }\\n\\n    // 20051300000000000000000\\n    function getDecimal(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint8) {\\n        return priceFeed.decimals();\\n    }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethPriceInUSD = (ethAmount * ethPrice) / 1e18;\\n        return ethPriceInUSD;\\n    }\\n\\n    function version() internal view returns (uint256) {\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n            0x694AA1769357215DE4FAC081bf1f309aDC325306\\n        );\\n        return priceFeed.version();\\n    }\\n}\\n\",\"keccak256\":\"0x21d482ec14be59652c85f66b84c4257f8655b7aeb9c19132360682c3b0743c1d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052670de0b6b3a76400006001553480156200001d57600080fd5b50604051620011b8380380620011b8833981810160405281019062000043919062000129565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200015b565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000f182620000c4565b9050919050565b6200010381620000e4565b81146200010f57600080fd5b50565b6000815190506200012381620000f8565b92915050565b600060208284031215620001425762000141620000bf565b5b6000620001528482850162000112565b91505092915050565b60805161103a6200017e600039600081816104da0152610707015261103a6000f3fe60806040526004361061007f5760003560e01c8063893d20e81161004e578063893d20e8146101425780639e87a5cd1461016d578063b60d428814610198578063d7b4750c146101a25761008e565b80630343fb2514610098578063098de820146100d55780633ccfd60b146101005780638381f58a146101175761008e565b3661008e5761008c6101df565b005b6100966101df565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610974565b610489565b6040516100cc91906109ba565b60405180910390f35b3480156100e157600080fd5b506100ea6104d2565b6040516100f791906109ba565b60405180910390f35b34801561010c57600080fd5b506101156104d8565b005b34801561012357600080fd5b5061012c6106fd565b60405161013991906109ba565b60405180910390f35b34801561014e57600080fd5b50610157610703565b60405161016491906109e4565b60405180910390f35b34801561017957600080fd5b5061018261072b565b60405161018f9190610a5e565b60405180910390f35b6101a06101df565b005b3480156101ae57600080fd5b506101c960048036038101906101c49190610aa5565b610755565b6040516101d691906109e4565b60405180910390f35b600560008190555060015461021f600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461079d90919063ffffffff16565b1015610260576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025790610b2f565b60405180910390fd5b6002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103129190610b7e565b925050819055503373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801561035f573d6000803e3d6000fd5b5060003373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050509050806103d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d090610bfe565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff16476040516103ff90610c4f565b60006040518083038185875af1925050503d806000811461043c576040519150601f19603f3d011682016040523d82523d6000602084013e610441565b606091505b5050905080610485576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047c90610cb0565b60405180910390fd5b5050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60015481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610566576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055d90610d1c565b60405180910390fd5b600060028054806020026020016040519081016040528092919081815260200182805480156105ea57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116105a0575b5050505050905060005b81518110156106995760006002828154811061061357610612610d3c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061069190610d6b565b9150506105f4565b50600067ffffffffffffffff8111156106b5576106b4610db3565b5b6040519080825280602002602001820160405280156106e35781602001602082028036833780820191505090505b50600290805190602001906106f992919061086a565b5050565b60005481565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006002828154811061076b5761076a610d3c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806107a9836107d9565b90506000670de0b6b3a764000082866107c29190610de2565b6107cc9190610e53565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610827573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084b9190610f11565b5050509150506402540be400816108629190610f8c565b915050919050565b8280548282559060005260206000209081019282156108e3579160200282015b828111156108e25782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061088a565b5b5090506108f091906108f4565b5090565b5b8082111561090d5760008160009055506001016108f5565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061094182610916565b9050919050565b61095181610936565b811461095c57600080fd5b50565b60008135905061096e81610948565b92915050565b60006020828403121561098a57610989610911565b5b60006109988482850161095f565b91505092915050565b6000819050919050565b6109b4816109a1565b82525050565b60006020820190506109cf60008301846109ab565b92915050565b6109de81610936565b82525050565b60006020820190506109f960008301846109d5565b92915050565b6000819050919050565b6000610a24610a1f610a1a84610916565b6109ff565b610916565b9050919050565b6000610a3682610a09565b9050919050565b6000610a4882610a2b565b9050919050565b610a5881610a3d565b82525050565b6000602082019050610a736000830184610a4f565b92915050565b610a82816109a1565b8114610a8d57600080fd5b50565b600081359050610a9f81610a79565b92915050565b600060208284031215610abb57610aba610911565b5b6000610ac984828501610a90565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567682100000000000000000000000000600082015250565b6000610b19601383610ad2565b9150610b2482610ae3565b602082019050919050565b60006020820190508181036000830152610b4881610b0c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610b89826109a1565b9150610b94836109a1565b9250828201905080821115610bac57610bab610b4f565b5b92915050565b7f53656e64206661696c6564000000000000000000000000000000000000000000600082015250565b6000610be8600b83610ad2565b9150610bf382610bb2565b602082019050919050565b60006020820190508181036000830152610c1781610bdb565b9050919050565b600081905092915050565b50565b6000610c39600083610c1e565b9150610c4482610c29565b600082019050919050565b6000610c5a82610c2c565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610c9a600b83610ad2565b9150610ca582610c64565b602082019050919050565b60006020820190508181036000830152610cc981610c8d565b9050919050565b7f53656e646572206973206e6f742074686520695f6f776e657200000000000000600082015250565b6000610d06601983610ad2565b9150610d1182610cd0565b602082019050919050565b60006020820190508181036000830152610d3581610cf9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d76826109a1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610da857610da7610b4f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000610ded826109a1565b9150610df8836109a1565b9250828202610e06816109a1565b91508282048414831517610e1d57610e1c610b4f565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e5e826109a1565b9150610e69836109a1565b925082610e7957610e78610e24565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610ea381610e84565b8114610eae57600080fd5b50565b600081519050610ec081610e9a565b92915050565b6000819050919050565b610ed981610ec6565b8114610ee457600080fd5b50565b600081519050610ef681610ed0565b92915050565b600081519050610f0b81610a79565b92915050565b600080600080600060a08688031215610f2d57610f2c610911565b5b6000610f3b88828901610eb1565b9550506020610f4c88828901610ee7565b9450506040610f5d88828901610efc565b9350506060610f6e88828901610efc565b9250506080610f7f88828901610eb1565b9150509295509295909350565b6000610f9782610ec6565b9150610fa283610ec6565b9250828202610fb081610ec6565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610fe857610fe7610b4f565b5b8282058414831517610ffd57610ffc610b4f565b5b509291505056fea2646970667358221220ecc8bf22efc23f29d01c8e1afaf0a29d4d2864cb77d679e6d0c21a24e315992564736f6c63430008120033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c8063893d20e81161004e578063893d20e8146101425780639e87a5cd1461016d578063b60d428814610198578063d7b4750c146101a25761008e565b80630343fb2514610098578063098de820146100d55780633ccfd60b146101005780638381f58a146101175761008e565b3661008e5761008c6101df565b005b6100966101df565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610974565b610489565b6040516100cc91906109ba565b60405180910390f35b3480156100e157600080fd5b506100ea6104d2565b6040516100f791906109ba565b60405180910390f35b34801561010c57600080fd5b506101156104d8565b005b34801561012357600080fd5b5061012c6106fd565b60405161013991906109ba565b60405180910390f35b34801561014e57600080fd5b50610157610703565b60405161016491906109e4565b60405180910390f35b34801561017957600080fd5b5061018261072b565b60405161018f9190610a5e565b60405180910390f35b6101a06101df565b005b3480156101ae57600080fd5b506101c960048036038101906101c49190610aa5565b610755565b6040516101d691906109e4565b60405180910390f35b600560008190555060015461021f600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461079d90919063ffffffff16565b1015610260576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025790610b2f565b60405180910390fd5b6002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103129190610b7e565b925050819055503373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801561035f573d6000803e3d6000fd5b5060003373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050509050806103d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d090610bfe565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff16476040516103ff90610c4f565b60006040518083038185875af1925050503d806000811461043c576040519150601f19603f3d011682016040523d82523d6000602084013e610441565b606091505b5050905080610485576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047c90610cb0565b60405180910390fd5b5050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60015481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610566576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055d90610d1c565b60405180910390fd5b600060028054806020026020016040519081016040528092919081815260200182805480156105ea57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116105a0575b5050505050905060005b81518110156106995760006002828154811061061357610612610d3c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061069190610d6b565b9150506105f4565b50600067ffffffffffffffff8111156106b5576106b4610db3565b5b6040519080825280602002602001820160405280156106e35781602001602082028036833780820191505090505b50600290805190602001906106f992919061086a565b5050565b60005481565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006002828154811061076b5761076a610d3c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806107a9836107d9565b90506000670de0b6b3a764000082866107c29190610de2565b6107cc9190610e53565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610827573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084b9190610f11565b5050509150506402540be400816108629190610f8c565b915050919050565b8280548282559060005260206000209081019282156108e3579160200282015b828111156108e25782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061088a565b5b5090506108f091906108f4565b5090565b5b8082111561090d5760008160009055506001016108f5565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061094182610916565b9050919050565b61095181610936565b811461095c57600080fd5b50565b60008135905061096e81610948565b92915050565b60006020828403121561098a57610989610911565b5b60006109988482850161095f565b91505092915050565b6000819050919050565b6109b4816109a1565b82525050565b60006020820190506109cf60008301846109ab565b92915050565b6109de81610936565b82525050565b60006020820190506109f960008301846109d5565b92915050565b6000819050919050565b6000610a24610a1f610a1a84610916565b6109ff565b610916565b9050919050565b6000610a3682610a09565b9050919050565b6000610a4882610a2b565b9050919050565b610a5881610a3d565b82525050565b6000602082019050610a736000830184610a4f565b92915050565b610a82816109a1565b8114610a8d57600080fd5b50565b600081359050610a9f81610a79565b92915050565b600060208284031215610abb57610aba610911565b5b6000610ac984828501610a90565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567682100000000000000000000000000600082015250565b6000610b19601383610ad2565b9150610b2482610ae3565b602082019050919050565b60006020820190508181036000830152610b4881610b0c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610b89826109a1565b9150610b94836109a1565b9250828201905080821115610bac57610bab610b4f565b5b92915050565b7f53656e64206661696c6564000000000000000000000000000000000000000000600082015250565b6000610be8600b83610ad2565b9150610bf382610bb2565b602082019050919050565b60006020820190508181036000830152610c1781610bdb565b9050919050565b600081905092915050565b50565b6000610c39600083610c1e565b9150610c4482610c29565b600082019050919050565b6000610c5a82610c2c565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610c9a600b83610ad2565b9150610ca582610c64565b602082019050919050565b60006020820190508181036000830152610cc981610c8d565b9050919050565b7f53656e646572206973206e6f742074686520695f6f776e657200000000000000600082015250565b6000610d06601983610ad2565b9150610d1182610cd0565b602082019050919050565b60006020820190508181036000830152610d3581610cf9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d76826109a1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610da857610da7610b4f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000610ded826109a1565b9150610df8836109a1565b9250828202610e06816109a1565b91508282048414831517610e1d57610e1c610b4f565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e5e826109a1565b9150610e69836109a1565b925082610e7957610e78610e24565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610ea381610e84565b8114610eae57600080fd5b50565b600081519050610ec081610e9a565b92915050565b6000819050919050565b610ed981610ec6565b8114610ee457600080fd5b50565b600081519050610ef681610ed0565b92915050565b600081519050610f0b81610a79565b92915050565b600080600080600060a08688031215610f2d57610f2c610911565b5b6000610f3b88828901610eb1565b9550506020610f4c88828901610ee7565b9450506040610f5d88828901610efc565b9350506060610f6e88828901610efc565b9250506080610f7f88828901610eb1565b9150509295509295909350565b6000610f9782610ec6565b9150610fa283610ec6565b9250828202610fb081610ec6565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610fe857610fe7610b4f565b5b8282058414831517610ffd57610ffc610b4f565b5b509291505056fea2646970667358221220ecc8bf22efc23f29d01c8e1afaf0a29d4d2864cb77d679e6d0c21a24e315992564736f6c63430008120033",
  "devdoc": {
    "author": "Praveen Sheoran",
    "details": "This implements price feeds for our library",
    "kind": "dev",
    "methods": {},
    "title": "A contract for funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "A demo",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "number",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 58,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "minimumUsd",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 61,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 65,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 73,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}