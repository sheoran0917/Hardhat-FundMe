{
    "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "priceFeedAddress",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "stateMutability": "payable",
            "type": "fallback"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "addressToAmountFunded",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "fund",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "funders",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "minimumUsd",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "number",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "owner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "priceFeed",
            "outputs": [
                {
                    "internalType": "contract AggregatorV3Interface",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "withdraw",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "stateMutability": "payable",
            "type": "receive"
        }
    ],
    "transactionHash": "0x1bfdda054279452e6f90117a82d1e1614ebf540bec22296572863f0aebc11ef8",
    "receipt": {
        "to": null,
        "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
        "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "transactionIndex": 0,
        "gasUsed": "975252",
        "logsBloom": "0x
        "blockHash": "0x5450211353cd7930e7e385cd0ce204153f1be8abcf6b5b8dfcdca3162abe8b41",
        "transactionHash": "0x1bfdda054279452e6f90117a82d1e1614ebf540bec22296572863f0aebc11ef8",
        "logs": [],
        "blockNumber": 2,
        "cumulativeGasUsed": "975252",
        "status": 1,
        "byzantium": true
    },
    "args": ["0x5FbDB2315678afecb367f032d93F642f64180aa3"],
    "numDeployments": 1,
    "solcInputHash": "d39adcad54e195f8fc0119eea84ef233",
    "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// Get funds from users\\n// Withdraw funds\\n// Set a minimum funding value in USD\\n\\n//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\nimport \\\"./PriceConverter.sol\\\";\\n\\n//Smart contarcts can also hold funds just like the wallet.\\n//Since everytime we deploy a contract they get a contract address and its nearly the same as wallet address.\\n// So both wallet and contract can hold native blockchain token like Etherium\\n\\ncontract FundMe {\\n    uint256 public number;\\n    uint256 public minimumUsd = 50 * 1e18;\\n\\n    address[] public funders;\\n    mapping(address => uint256) public addressToAmountFunded;\\n    using PriceConverter for uint256; // Using as Library\\n    address public owner;\\n    AggregatorV3Interface public priceFeed;\\n\\n    constructor(address priceFeedAddress) {\\n        owner = msg.sender;\\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    // This function for people to send money to\\n    function fund() public payable {\\n        // Want to be able to set a minimum amount in USD.\\n        // 1. How do we send ETH to this contract?\\n        // msg - a global variable\\n\\n        // require is checker which check values if does not meet the criteria it will revret.\\n        // What is reverting - Undo any action before, and send the remaining gas.\\n        number = 5;\\n        // Lets say if we call this fund method with ether less than 1, then it will revert.\\n        // So did we spend any gas? Yes we did. We spend the gas on assiging the value to number = 5.\\n        // But it will return all the gas after this require\\n        require(\\n            msg.value.getConversionRate(priceFeed) >= minimumUsd,\\n            \\\"Didn't send enough!\\\"\\n        ); // 1e18 == 1 * 10 ** 18 = 1000000000000000000\\n        funders.push(msg.sender);\\n        addressToAmountFunded[msg.sender] += msg.value;\\n\\n        //Send ether or withdraw ether\\n        //transfer\\n        // msg.sender = address type\\n        // payable(msg.sender) = payable type\\n        //Problem with transfer funtion that it is capped at 2300 gas and it will throw an error\\n        payable(msg.sender).transfer(address(this).balance);\\n        //Send\\n        // 2300 gas cap but wont throw an error will return a bool\\n        bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        require(sendSuccess, \\\"Send failed\\\");\\n        //Call\\n        // we can use it call any function in all of the etherum\\n        // No capped gas and returns boolean and bytes data\\n        (bool callSuceess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuceess, \\\"Call failed\\\");\\n    }\\n\\n    // This function is for the owner of this contract to withdraw money that different funders gives us.\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address fundersAddress = funders[funderIndex];\\n            addressToAmountFunded[fundersAddress] = 0;\\n        }\\n        //reset the address\\n        funders = new address[](0);\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Sender is not the owner\\\");\\n        _;\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n}\\n\",\"keccak256\":\"0x0c670bc65c5d2df60c6d10ecc99c9d6f8129bf299e2686a9f2191f3a59d88f67\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n// All the funtions are internal in library\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        return uint256(price * 1e10);\\n    }\\n\\n    // 20051300000000000000000\\n    function getDecimal(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint8) {\\n        return priceFeed.decimals();\\n    }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethPriceInUSD = (ethAmount * ethPrice) / 1e18;\\n        return ethPriceInUSD;\\n    }\\n\\n    function version() internal view returns (uint256) {\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n            0x694AA1769357215DE4FAC081bf1f309aDC325306\\n        );\\n        return priceFeed.version();\\n    }\\n}\\n\",\"keccak256\":\"0x21d482ec14be59652c85f66b84c4257f8655b7aeb9c19132360682c3b0743c1d\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x60806040526802b5e3af16b18800006001553480156200001e57600080fd5b50604051620010ed380380620010ed833981810160405281019062000044919062000137565b33600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000169565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000ff82620000d2565b9050919050565b6200011181620000f2565b81146200011d57600080fd5b50565b600081519050620001318162000106565b92915050565b60006020828403121562000150576200014f620000cd565b5b6000620001608482850162000120565b91505092915050565b610f7480620001796000396000f3fe60806040526004361061007f5760003560e01c80638381f58a1161004e5780638381f58a146101425780638da5cb5b1461016d578063b60d428814610198578063dc0d3dff146101a25761008e565b8063098de820146100985780633ccfd60b146100c35780633e47d6f3146100da578063741bef1a146101175761008e565b3661008e5761008c6101df565b005b6100966101df565b005b3480156100a457600080fd5b506100ad610489565b6040516100ba9190610864565b60405180910390f35b3480156100cf57600080fd5b506100d861048f565b005b3480156100e657600080fd5b5061010160048036038101906100fc91906108e2565b61062e565b60405161010e9190610864565b60405180910390f35b34801561012357600080fd5b5061012c610646565b604051610139919061096e565b60405180910390f35b34801561014e57600080fd5b5061015761066c565b6040516101649190610864565b60405180910390f35b34801561017957600080fd5b50610182610672565b60405161018f9190610998565b60405180910390f35b6101a06101df565b005b3480156101ae57600080fd5b506101c960048036038101906101c491906109df565b610698565b6040516101d69190610998565b60405180910390f35b600560008190555060015461021f600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346106d790919063ffffffff16565b1015610260576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025790610a69565b60405180910390fd5b6002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103129190610ab8565b925050819055503373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801561035f573d6000803e3d6000fd5b5060003373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050509050806103d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d090610b38565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff16476040516103ff90610b89565b60006040518083038185875af1925050503d806000811461043c576040519150601f19603f3d011682016040523d82523d6000602084013e610441565b606091505b5050905080610485576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047c90610bea565b60405180910390fd5b5050565b60015481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461051f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051690610c56565b60405180910390fd5b60005b6002805490508110156105cb5760006002828154811061054557610544610c76565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806105c390610ca5565b915050610522565b50600067ffffffffffffffff8111156105e7576105e6610ced565b5b6040519080825280602002602001820160405280156106155781602001602082028036833780820191505090505b506002908051906020019061062b9291906107a4565b50565b60036020528060005260406000206000915090505481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600281815481106106a857600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806106e383610713565b90506000670de0b6b3a764000082866106fc9190610d1c565b6107069190610d8d565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610761573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107859190610e4b565b5050509150506402540be4008161079c9190610ec6565b915050919050565b82805482825590600052602060002090810192821561081d579160200282015b8281111561081c5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906107c4565b5b50905061082a919061082e565b5090565b5b8082111561084757600081600090555060010161082f565b5090565b6000819050919050565b61085e8161084b565b82525050565b60006020820190506108796000830184610855565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108af82610884565b9050919050565b6108bf816108a4565b81146108ca57600080fd5b50565b6000813590506108dc816108b6565b92915050565b6000602082840312156108f8576108f761087f565b5b6000610906848285016108cd565b91505092915050565b6000819050919050565b600061093461092f61092a84610884565b61090f565b610884565b9050919050565b600061094682610919565b9050919050565b60006109588261093b565b9050919050565b6109688161094d565b82525050565b6000602082019050610983600083018461095f565b92915050565b610992816108a4565b82525050565b60006020820190506109ad6000830184610989565b92915050565b6109bc8161084b565b81146109c757600080fd5b50565b6000813590506109d9816109b3565b92915050565b6000602082840312156109f5576109f461087f565b5b6000610a03848285016109ca565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567682100000000000000000000000000600082015250565b6000610a53601383610a0c565b9150610a5e82610a1d565b602082019050919050565b60006020820190508181036000830152610a8281610a46565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ac38261084b565b9150610ace8361084b565b9250828201905080821115610ae657610ae5610a89565b5b92915050565b7f53656e64206661696c6564000000000000000000000000000000000000000000600082015250565b6000610b22600b83610a0c565b9150610b2d82610aec565b602082019050919050565b60006020820190508181036000830152610b5181610b15565b9050919050565b600081905092915050565b50565b6000610b73600083610b58565b9150610b7e82610b63565b600082019050919050565b6000610b9482610b66565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610bd4600b83610a0c565b9150610bdf82610b9e565b602082019050919050565b60006020820190508181036000830152610c0381610bc7565b9050919050565b7f53656e646572206973206e6f7420746865206f776e6572000000000000000000600082015250565b6000610c40601783610a0c565b9150610c4b82610c0a565b602082019050919050565b60006020820190508181036000830152610c6f81610c33565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610cb08261084b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610ce257610ce1610a89565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000610d278261084b565b9150610d328361084b565b9250828202610d408161084b565b91508282048414831517610d5757610d56610a89565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610d988261084b565b9150610da38361084b565b925082610db357610db2610d5e565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610ddd81610dbe565b8114610de857600080fd5b50565b600081519050610dfa81610dd4565b92915050565b6000819050919050565b610e1381610e00565b8114610e1e57600080fd5b50565b600081519050610e3081610e0a565b92915050565b600081519050610e45816109b3565b92915050565b600080600080600060a08688031215610e6757610e6661087f565b5b6000610e7588828901610deb565b9550506020610e8688828901610e21565b9450506040610e9788828901610e36565b9350506060610ea888828901610e36565b9250506080610eb988828901610deb565b9150509295509295909350565b6000610ed182610e00565b9150610edc83610e00565b9250828202610eea81610e00565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610f2257610f21610a89565b5b8282058414831517610f3757610f36610a89565b5b509291505056fea264697066735822122094bcfe54b6d9ff83b3b1fcd3a6ccb1d13184717d28ed90ce56ee4f250e9a1a9064736f6c63430008120033",
    "deployedBytecode": "0x60806040526004361061007f5760003560e01c80638381f58a1161004e5780638381f58a146101425780638da5cb5b1461016d578063b60d428814610198578063dc0d3dff146101a25761008e565b8063098de820146100985780633ccfd60b146100c35780633e47d6f3146100da578063741bef1a146101175761008e565b3661008e5761008c6101df565b005b6100966101df565b005b3480156100a457600080fd5b506100ad610489565b6040516100ba9190610864565b60405180910390f35b3480156100cf57600080fd5b506100d861048f565b005b3480156100e657600080fd5b5061010160048036038101906100fc91906108e2565b61062e565b60405161010e9190610864565b60405180910390f35b34801561012357600080fd5b5061012c610646565b604051610139919061096e565b60405180910390f35b34801561014e57600080fd5b5061015761066c565b6040516101649190610864565b60405180910390f35b34801561017957600080fd5b50610182610672565b60405161018f9190610998565b60405180910390f35b6101a06101df565b005b3480156101ae57600080fd5b506101c960048036038101906101c491906109df565b610698565b6040516101d69190610998565b60405180910390f35b600560008190555060015461021f600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346106d790919063ffffffff16565b1015610260576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025790610a69565b60405180910390fd5b6002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103129190610ab8565b925050819055503373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801561035f573d6000803e3d6000fd5b5060003373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050509050806103d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d090610b38565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff16476040516103ff90610b89565b60006040518083038185875af1925050503d806000811461043c576040519150601f19603f3d011682016040523d82523d6000602084013e610441565b606091505b5050905080610485576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047c90610bea565b60405180910390fd5b5050565b60015481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461051f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051690610c56565b60405180910390fd5b60005b6002805490508110156105cb5760006002828154811061054557610544610c76565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806105c390610ca5565b915050610522565b50600067ffffffffffffffff8111156105e7576105e6610ced565b5b6040519080825280602002602001820160405280156106155781602001602082028036833780820191505090505b506002908051906020019061062b9291906107a4565b50565b60036020528060005260406000206000915090505481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600281815481106106a857600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806106e383610713565b90506000670de0b6b3a764000082866106fc9190610d1c565b6107069190610d8d565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610761573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107859190610e4b565b5050509150506402540be4008161079c9190610ec6565b915050919050565b82805482825590600052602060002090810192821561081d579160200282015b8281111561081c5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906107c4565b5b50905061082a919061082e565b5090565b5b8082111561084757600081600090555060010161082f565b5090565b6000819050919050565b61085e8161084b565b82525050565b60006020820190506108796000830184610855565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108af82610884565b9050919050565b6108bf816108a4565b81146108ca57600080fd5b50565b6000813590506108dc816108b6565b92915050565b6000602082840312156108f8576108f761087f565b5b6000610906848285016108cd565b91505092915050565b6000819050919050565b600061093461092f61092a84610884565b61090f565b610884565b9050919050565b600061094682610919565b9050919050565b60006109588261093b565b9050919050565b6109688161094d565b82525050565b6000602082019050610983600083018461095f565b92915050565b610992816108a4565b82525050565b60006020820190506109ad6000830184610989565b92915050565b6109bc8161084b565b81146109c757600080fd5b50565b6000813590506109d9816109b3565b92915050565b6000602082840312156109f5576109f461087f565b5b6000610a03848285016109ca565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567682100000000000000000000000000600082015250565b6000610a53601383610a0c565b9150610a5e82610a1d565b602082019050919050565b60006020820190508181036000830152610a8281610a46565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ac38261084b565b9150610ace8361084b565b9250828201905080821115610ae657610ae5610a89565b5b92915050565b7f53656e64206661696c6564000000000000000000000000000000000000000000600082015250565b6000610b22600b83610a0c565b9150610b2d82610aec565b602082019050919050565b60006020820190508181036000830152610b5181610b15565b9050919050565b600081905092915050565b50565b6000610b73600083610b58565b9150610b7e82610b63565b600082019050919050565b6000610b9482610b66565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610bd4600b83610a0c565b9150610bdf82610b9e565b602082019050919050565b60006020820190508181036000830152610c0381610bc7565b9050919050565b7f53656e646572206973206e6f7420746865206f776e6572000000000000000000600082015250565b6000610c40601783610a0c565b9150610c4b82610c0a565b602082019050919050565b60006020820190508181036000830152610c6f81610c33565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610cb08261084b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610ce257610ce1610a89565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000610d278261084b565b9150610d328361084b565b9250828202610d408161084b565b91508282048414831517610d5757610d56610a89565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610d988261084b565b9150610da38361084b565b925082610db357610db2610d5e565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610ddd81610dbe565b8114610de857600080fd5b50565b600081519050610dfa81610dd4565b92915050565b6000819050919050565b610e1381610e00565b8114610e1e57600080fd5b50565b600081519050610e3081610e0a565b92915050565b600081519050610e45816109b3565b92915050565b600080600080600060a08688031215610e6757610e6661087f565b5b6000610e7588828901610deb565b9550506020610e8688828901610e21565b9450506040610e9788828901610e36565b9350506060610ea888828901610e36565b9250506080610eb988828901610deb565b9150509295509295909350565b6000610ed182610e00565b9150610edc83610e00565b9250828202610eea81610e00565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610f2257610f21610a89565b5b8282058414831517610f3757610f36610a89565b5b509291505056fea264697066735822122094bcfe54b6d9ff83b3b1fcd3a6ccb1d13184717d28ed90ce56ee4f250e9a1a9064736f6c63430008120033",
    "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 50,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "number",
                "offset": 0,
                "slot": "0",
                "type": "t_uint256"
            },
            {
                "astId": 55,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "minimumUsd",
                "offset": 0,
                "slot": "1",
                "type": "t_uint256"
            },
            {
                "astId": 58,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "funders",
                "offset": 0,
                "slot": "2",
                "type": "t_array(t_address)dyn_storage"
            },
            {
                "astId": 62,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "addressToAmountFunded",
                "offset": 0,
                "slot": "3",
                "type": "t_mapping(t_address,t_uint256)"
            },
            {
                "astId": 67,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "owner",
                "offset": 0,
                "slot": "4",
                "type": "t_address"
            },
            {
                "astId": 70,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "priceFeed",
                "offset": 0,
                "slot": "5",
                "type": "t_contract(AggregatorV3Interface)45"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
                "base": "t_address",
                "encoding": "dynamic_array",
                "label": "address[]",
                "numberOfBytes": "32"
            },
            "t_contract(AggregatorV3Interface)45": {
                "encoding": "inplace",
                "label": "contract AggregatorV3Interface",
                "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
